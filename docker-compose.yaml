version: "3.7"
# Use --compatibility flag with "docker-compose up" for deploy key translation

services:

  cardano-relay1:
    container_name: cardano-relay1
    environment:
      CNODE_HOSTNAME: 'CHANGE ME'
      PUBLIC_PORT: 3001
    image: cardano_node:latest
    #command: ["/bin/bash", "-c", "start-relay.sh"]           # Comment for node producer or relay with topology updater
    #command: ["/bin/bash", "-c", "start-with-topology.sh"]  # Uncomment for relay with topology updater
    command: ["/bin/bash", "-c", "tail","-f","/dev/null"]   # Used for maintenance purpose
    tty: true
    volumes:
      - type: bind
        source: ./relay1/socket
        target: /cardano/socket
      - type: bind
        source: ./relay1/db
        target: /cardano/db
      - type: bind
        source: ./relay1/config
        target: /cardano/config
        read_only: true
    ports:
      - "3001:3000"
    networks:
      cardano:
        aliases:
          - relay1
    restart: unless-stopped
    stop_signal: SIGINT
    stop_grace_period: 10s
    healthcheck:
      # Ping the EKG port to see if it responds.
      # Assuming if EKG isn't up then the rest of cardano-node isn't either.
      test: [ "CMD-SHELL", "curl -H \"Accept: application/json\" -f 127.0.0.1:12788 || exit 1" ]
      interval: 60s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G

  cardano-relay2:
    container_name: cardano-relay2
    environment:
      CNODE_HOSTNAME: 'CHANGE ME'
      PUBLIC_PORT: 3002
    image: cardano_node:latest
    #command: ["/bin/bash", "-c", "start-relay.sh"]           # Comment for node producer or relay with topology updater
    #command: ["/bin/bash", "-c", "start-with-topology.sh"]  # Uncomment for relay with topology updater
    command: ["/bin/bash", "-c", "tail","-f","/dev/null"]   # Used for maintenance purpose
    tty: true
    volumes:
      - type: bind
        source: ./relay2/socket
        target: /cardano/socket
      - type: bind
        source: ./relay2/db
        target: /cardano/db
      - type: bind
        source: ./relay2/config
        target: /cardano/config
        read_only: true
    ports:
      - "3002:3000"
    networks:
      cardano:
        aliases:
          - relay2
    restart: unless-stopped
    stop_signal: SIGINT
    stop_grace_period: 10s
    healthcheck:
      # Ping the EKG port to see if it responds.
      # Assuming if EKG isn't up then the rest of cardano-node isn't either.
      test: [ "CMD-SHELL", "curl -H \"Accept: application/json\" -f 127.0.0.1:12788 || exit 1" ]
      interval: 60s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G

  cardano-bp:
    container_name: cardano-bp
    image: cardano_node:latest
    #command: ["/bin/bash", "-c", "start-relay.sh"]           # Comment for node producer or relay with topology updater
    #command: ["/bin/bash", "-c", "start-producer.sh"]       # Uncomment for node producer
    command: ["/bin/bash", "-c", "tail","-f","/dev/null"]   # Used for maintenance purpose
    tty: true
    volumes:
      - type: bind
        source: ./bp/socket
        target: /cardano/socket
      - type: bind
        source: ./bp/db
        target: /cardano/db
      - type: bind
        source: ./bp/config
        target: /cardano/config
        read_only: true
    ports:
      - "5000:3000"
    networks:
      cardano:
        aliases:
          - bp
    restart: unless-stopped
    stop_signal: SIGINT
    stop_grace_period: 10s
    healthcheck:
      # Ping the EKG port to see if it responds.
      # Assuming if EKG isn't up then the rest of cardano-node isn't either.
      test: [ "CMD-SHELL", "curl -H \"Accept: application/json\" -f 127.0.0.1:12788 || exit 1" ]
      interval: 60s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 16G

  cardano-monitor:
    container_name: cardano-monitor
    image: cardano_monitor:latest
    command: ["start-monitoring.sh"]
    depends_on:
      - cardano-relay1
      - cardano-relay2
      - cardano-bp
    volumes:
      - type: volume
        source: prometheus-db
        target: /cardano/data
      - type: bind
        source: ./monitor/config
        target: /cardano/config
    ports:
      - "3200:3200"
    networks:
      cardano:
    restart: unless-stopped
    stop_grace_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-submit:
    container_name: cardano-submit
    image: cardano_submit:latest
    command: ["/bin/bash", "-c", "start.sh"]
    tty: true
    volumes:
      - type: bind
        source: ./relay1/socket
        target: /cardano/socket
      - type: bind
        source: ./relay1/config
        target: /cardano/config
        read_only: true
    ports:
      - "3080:3000"
    restart: unless-stopped
    stop_signal: SIGINT
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-db-sync:
    container_name: db-sync
    image: cardano_db_sync:13.1.0.2
    environment:
      PGPASSFILE: '/cardano/config/pgpass-mainnet'
    #command: ["/bin/bash", "-c", "start.sh"]
    command: ["/bin/bash", "-c", "sleep.sh"]   # Used for maintenance purpose
    depends_on:
      # Depend on both services to be healthy before starting.
      cardano-relay1:
        condition: service_healthy
      cardano-postgres:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./db-sync/config
        target: /cardano/config
        read_only: true
      - type: bind
        source: ./relay1/socket
        target: /cardano/socket
      - type: volume
        source: db-sync-ledger
        target: /cardano/ledger-state
    networks:
      db-sync:
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-postgres:
    container_name: cardano-postgres
    image: postgres:11.18-alpine
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    command: ${POSTGRES_ARGS:--c maintenance_work_mem=1GB -c max_parallel_maintenance_workers=4}
    ports:
      - "5433:5432"
    networks:
      db-sync:
        aliases:
          - postgres
    volumes:
      - type: volume
        source: postgres
        target: /var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      # Use pg_isready to check postgres is running. Substitute different
      # user `postgres` if you've setup differently to config/pgpass-mainnet
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

volumes:
  prometheus-db:
  postgres:
  db-sync-ledger:

networks:
  cardano:
  db-sync:

secrets:
  postgres_db:
    file: ./secrets/postgres_db
  postgres_password:
    file: ./secrets/postgres_password
  postgres_user:
    file: ./secrets/postgres_user
